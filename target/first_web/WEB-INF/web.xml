<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <!--springmvc前端控制器
          web.xml文件加载顺序为：(与顺序无关)
          ServletContext -> context-param -> listener -> filter -> servlet-->
    <!--Archetype Created Web Application-->

    <!--定义了web应用的名字-->
    <display-name>first_web</display-name>
    <!--web应用的描述-->
    <description>first_web try to realize</description>

    <!--这里servlet必须要匹配servlet-mapping，两个servlet-name必须相同-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:config/*.xml</param-value>
    </context-param>

    <!--拦截静态资源的请求-->
    <!--<servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>.html</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>.js</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>.css</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>.jsp</url-pattern>
    </servlet-mapping>
-->
    <!--监听器，自动装配ApplicationContext的配置信息，启动容器，默认执行它实现的方法。-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--可以添加乱码过滤器.默认编码是utf-8,否则前端页面提交数据，不能找到-->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--配置shiro拦截器-->
    <filter>
        <!--下面的配置表示对象由spring创建，但是由servlet来管理-->
        <filter-name><!--shiroFilter-->shiroFilterFactoryBean</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <!--表示bean的生命周期由servlet来管理-->
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <!--有改动-->
        <filter-name><!--shiroFilter-->shiroFilterFactoryBean</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>first-web</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!--ContextConfigLocation配置springmvc加载的配置文件，里面包含各种适配器和映射器等
            尽量扫 描所有的xml文件，否则有些没有扫描到的bean可能会导致注入失败-->
            <param-value>classpath:config/*.xml</param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>first-web</servlet-name>
        <!--用这样的设置，默认匹配所有的请求-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>two-url</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:config/*.xml</param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <!--配置对*.action的支持-->
        <servlet-name>two-url</servlet-name>
        <url-pattern>*.action</url-pattern>
    </servlet-mapping>

    <!--<session-config>
        <tracking-mode>COOKIE</tracking-mode>
    </session-config>
-->
    <session-config>
        <!-- session 过期时间60分钟 -->
        <session-timeout>60</session-timeout>
    </session-config>
</web-app>